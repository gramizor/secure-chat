import { WebSocketServer, WebSocket as WsSocket } from 'ws';
import http from 'http';

const server = http.createServer();
const wss = new WebSocketServer({ server });

type ClientId = string;
type Pin = string;

const clients = new Map<ClientId, WsSocket>();
const pinToClientId = new Map<Pin, { clientId: string; uuid: string }>();

console.log('üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è WebSocket-—Å–µ—Ä–≤–µ—Ä–∞...');

wss.on('connection', (ws: WsSocket, req) => {
    let clientId: string = '';
    let clientUUID: string = '';

    const ip = req.socket.remoteAddress;
    console.log(`üÜï –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç ${ip}`);

    ws.on('message', (data) => {
        try {
            const raw = data.toString();
            console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', raw);

            const msg = JSON.parse(raw);
            console.log('üîç –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', msg);

            if (!msg.type || !msg.from) {
                console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç type –∏–ª–∏ from');
                return;
            }

            if (msg.type === 'join') {
                clientId = msg.from;
                clientUUID = msg.uuid;

                clients.set(clientId, ws);
                console.log(`‚úÖ –ö–ª–∏–µ–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${clientId}`);

                if (msg.pin) {
                    pinToClientId.set(msg.pin, {
                        clientId,
                        uuid: clientUUID
                    });
                    console.log(`üìç PIN –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${msg.pin} ‚Üí ${clientId} (uuid: ${clientUUID})`);
                } else {
                    console.warn('‚ö†Ô∏è join –±–µ–∑ PIN ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞');
                }

                console.log(`üì¶ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.size}, PIN‚Äô–æ–≤: ${pinToClientId.size}`);
                return;
            }

            // —Ä–æ—É—Ç–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏—è
            let targetClientId = msg.to;

            if (pinToClientId.has(msg.to)) {
                const entry = pinToClientId.get(msg.to)!;
                targetClientId = entry.clientId;
                console.log(`üì¶ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –ø–æ PIN ${msg.to} ‚Üí UUID ${targetClientId}`);
            } else {
                console.log(`üì¶ –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º –ø–æ UUID ${msg.to}`);
            }

            const target = clients.get(targetClientId);

            if (target) {
                target.send(JSON.stringify(msg));
                console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ ${msg.type} ‚Üí ${targetClientId}`);
            } else {
                console.warn(`‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å ${targetClientId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ clients`);
            }
        } catch (err) {
            console.error('üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', err);
        }
    });

    ws.on('close', () => {
        console.log(`üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${clientId || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'} –∑–∞–∫—Ä—ã—Ç–æ`);

        if (clientId) {
            clients.delete(clientId);
            console.log(`üóë –ö–ª–∏–µ–Ω—Ç —É–¥–∞–ª—ë–Ω –∏–∑ clients: ${clientId}`);

            // —á–∏—Å—Ç–∏–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ PIN‚Äô—ã
            const before = pinToClientId.size;
            for (const [pin, entry] of pinToClientId.entries()) {
                if (entry.clientId === clientId) {
                    pinToClientId.delete(pin);
                    console.log(`üßπ PIN ${pin} –æ—Ç–≤—è–∑–∞–Ω –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}`);
                }
            }

            console.log(`üì¶ –û—Å—Ç–∞–ª–æ—Å—å –∫–ª–∏–µ–Ω—Ç–æ–≤: ${clients.size}, PIN‚Äô–æ–≤: ${pinToClientId.size} (–±—ã–ª–æ ${before})`);
        }
    });

    ws.on('error', (err) => {
        console.error(`‚ùó WebSocket error —Å ${clientId || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}:`, err);
    });
});

server.listen(3001, () => {
    console.log('üõ∞ WebSocket-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://localhost:3001');
});
