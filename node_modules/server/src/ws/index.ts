import { WebSocketServer } from 'ws'
import { ClientManager } from './clientManager'
import { OfferRegistry } from './clientManager'

export function createWSServer(port: number) {
    const wss = new WebSocketServer({ port })
    console.log(`üü¢ WebSocket —Å–∏–≥–Ω–∞–ª–∏–Ω–≥ –Ω–∞ ws://localhost:${port}`)

    wss.on('connection', ws => {
        let clientId: string | null = null

        ws.on('message', raw => {
            try {
                const msg = JSON.parse(raw.toString())

                // === JOIN ===
                if (typeof msg.id === 'string') {
                    clientId = msg.id
                    ClientManager.add(msg.id, ws)
                    console.log(`üë§ –ö–ª–∏–µ–Ω—Ç ${msg.id} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è`)
                }

                // === REGISTER OFFER ===
                if (msg.type === 'register-offer') {
                    const { pin, peerId, sdp, pubKey } = msg.data
                    OfferRegistry.register(pin, peerId, sdp, pubKey)
                    console.log(`üìå –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω offer –ø–æ PIN ${pin}`)
                    return
                }

                // === GET OFFER BY PIN ===
                if (msg.type === 'get-offer-by-pin') {
                    const { pin } = msg.data
                    const offer = OfferRegistry.consume(pin)

                    if (offer) {
                        ClientManager.send(msg.from, {
                            type: 'offer-response',
                            data: offer
                        })
                        console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω offer –ø–æ PIN ${pin}`)
                    } else {
                        ClientManager.send(msg.from, {
                            type: 'offer-not-found',
                            reason: 'expired or invalid'
                        })
                    }

                    return
                }

                // === ANSWER ===
                if (msg.type === 'answer') {
                    ClientManager.send(msg.to, msg)
                }

            } catch (e) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:', e)
            }
        })

        ws.on('close', () => {
            if (clientId) {
                ClientManager.remove(clientId)
                console.log(`üîå –ö–ª–∏–µ–Ω—Ç ${clientId} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`)
            }
        })
    })
}
