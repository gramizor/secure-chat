import {useEffect, useState} from "react"
import {useSearchParams} from "react-router-dom"
import {v4 as uuid} from "uuid"
import {WebSocketClient} from "@/shared/api/ws/WebSocketClient"
import {RTCPeer} from "@/shared/api/rtc/RTCPeer"
import {ChatBox} from "@/widgets/chat/ChatBox.tsx"

const myPeerId = uuid()

function waitUntilOpen(socket: WebSocket): Promise<void> {
    return new Promise((resolve) => {
        if (socket.readyState === WebSocket.OPEN) return resolve()
        socket.addEventListener("open", () => resolve(), {once: true})
    })
}

export const JoinPage = () => {
    const [params] = useSearchParams()
    const pin = params.get("pin")
    const [status, setStatus] = useState("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...")
    const [peer, setPeer] = useState<RTCPeer | null>(null)
    const [ws, setWs] = useState<WebSocketClient | null>(null)

    useEffect(() => {
        if (!pin) {
            setStatus("‚ùå PIN –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –≤ URL")
            return
        }

        const client = new WebSocketClient(myPeerId)
        setWs(client)

        client.onMessage(async (msg) => {
            if (msg.type === "offer-response" && msg.data) {
                const {peerId, sdp, pubKey} = msg.data

                setStatus("üì® –ü–æ–ª—É—á–µ–Ω offer, —Å–æ–∑–¥–∞—ë–º answer...")

                const newPeer = new RTCPeer()
                setPeer(newPeer)
                await newPeer.acceptOffer(sdp)

                const answer = await newPeer.createAnswer()

                client.send({
                    type: "answer",
                    from: myPeerId,
                    to: peerId,
                    data: {sdp: answer}
                })

                setStatus("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.")
            }

            if (msg.type === "offer-not-found") {
                setStatus("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ: –ø–∏–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.")
            }
        })

        waitUntilOpen(client.socket).then(() => {
            console.log("üü¢ WebSocket –æ—Ç–∫—Ä—ã—Ç –Ω–∞ JoinPage")

            client.send({
                type: "get-offer-by-pin",
                from: myPeerId,
                data: {pin}
            })
        })

        return () => client.close()
    }, [pin])

    return (
        <div>
            <h2>üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ PIN</h2>
            <p>
                –í–∞—à peerId: <b>{myPeerId.slice(0, 8)}</b>
            </p>
            <p>{status}</p>
            {peer && <ChatBox peer={peer}/>}
        </div>
    )
}
