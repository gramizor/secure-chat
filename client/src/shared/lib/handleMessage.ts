import {RTCPeer} from "@shared/api/RTCPeer";
import {WebSocketClient} from "@shared/api/WebSocketClient";
import {connectionExists, saveConnectionHistory} from "@shared/lib/db";
import {addPending, clearPending} from "@shared/lib/pendingManager";

interface HandleMessageParams {
    msg: any;
    selfId: string;
    peer: React.MutableRefObject<RTCPeer | null>;
    wsRef: React.MutableRefObject<WebSocketClient | null>;
    status: 'idle' | 'connecting' | 'connected';
    setConnectedPeerId: (id: string | null) => void;
    setStatus: (s: 'idle' | 'connecting' | 'connected') => void;
    setMode: (m: 'idle' | 'host' | 'join') => void;
    setLog: (logs: string[]) => void;
    addLog: (txt: string) => void;
    clearPinTimer: () => void;
    loadChatHistory: () => void;
}

export const handleMessage = ({
                                  msg, selfId, peer, wsRef, status,
                                  setConnectedPeerId, setStatus, setMode, setLog,
                                  addLog, clearPinTimer, loadChatHistory,
                              }: HandleMessageParams & { msg: any }) => {
    switch (msg.type) {
        case "offer": {
            if (status === "connected" || peer.current || wsRef.current?.getSocketReadyState() !== 1) {
                if (msg.from !== selfId) {
                    addPending(msg.from);
                    addLog(`üì• —É–∂–µ –µ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ, –≤—Ö–æ–¥—è—â–∏–π offer –æ—Ç ${msg.from} —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ pending`);
                } else {
                    addLog(`‚ö†Ô∏è –ø–æ–≤—Ç–æ—Ä–Ω—ã–π offer –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ peer ${msg.from} ‚Äî –∏–≥–Ω–æ—Ä`);
                }
                return;
            }

            addLog(`üì© offer –æ—Ç ${msg.from}`);
            peer.current = new RTCPeer(false);
            addLog("[RTC] —Å–æ–∑–¥–∞–Ω peer (receiver)");

            peer.current.onMessage((m) => addLog(`üë§ ${m}`));
            peer.current.onOpen(async () => {
                setConnectedPeerId(msg.from);
                setStatus("connected");
                addLog("üîó –∫–∞–Ω–∞–ª –æ—Ç–∫—Ä—ã—Ç");
                clearPinTimer();
                clearPending(msg.from);

                const exists = await connectionExists(msg.from);
                if (!exists) {
                    const name = prompt("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–∞—Ç–∞") ?? "–ë–µ–∑ –∏–º–µ–Ω–∏";
                    await saveConnectionHistory(msg.from, name);
                    loadChatHistory();
                }
            });

            peer.current.onIceCandidate((c) =>
                wsRef.current?.send({type: "ice-candidate", to: msg.from, data: {candidate: c}})
            );

            peer.current.onClose?.(() => {
                addLog("üö´ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ ‚Äî –ø–æ –æ—à–∏–±–∫–µ –∫–∞–Ω–∞–ª–∞");
                peer.current?.close();
                wsRef.current?.close(1000, "datachannel error");
                wsRef.current = null;
                peer.current = null;
                setConnectedPeerId(null);
                setStatus("idle");
                setMode("idle");
                setLog([]);
            });

            peer.current.acceptOffer(msg.data.sdp, msg.data.publicKey).then((answer) => {
                wsRef.current?.send({type: "answer", to: msg.from, data: answer});
            });
            break;
        }

        case "answer": {
            addLog(`üì© answer –æ—Ç ${msg.from}`);
            peer.current?.acceptAnswer(msg.data.sdp, msg.data.publicKey);
            addLog("[RTC] answer –ø—Ä–∏–Ω—è—Ç (host)");

            connectionExists(msg.from).then((exists) => {
                if (!exists) {
                    const name = prompt("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–∞—Ç–∞") ?? "–ë–µ–∑ –∏–º–µ–Ω–∏";
                    saveConnectionHistory(msg.from, name).then(loadChatHistory);
                }
            });
            break;
        }

        case "ice-candidate": {
            peer.current?.addIceCandidate(msg.data.candidate).then(() => {
                addLog("[ICE] –∫–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω");
            });
            break;
        }

        case "disconnect": {
            addLog(`üîå —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ`);
            peer.current?.close();
            peer.current = null;
            wsRef.current?.close(1000, "disconnect");
            wsRef.current = null;
            setConnectedPeerId(null);
            setStatus("idle");
            setMode("idle");
            setLog([]);
            break;
        }
    }
};
